<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Leonly91's Personal Blog]]></title>
  <subtitle><![CDATA[Hello, World!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-07-16T08:25:38.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Leon]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[NSURLSession]]></title>
    <link href="http://yoursite.com/2016/07/16/NSURLSession/"/>
    <id>http://yoursite.com/2016/07/16/NSURLSession/</id>
    <published>2016-07-16T08:25:38.000Z</published>
    <updated>2016-07-16T08:25:38.000Z</updated>
    <content type="html"><![CDATA[<p>iOS 7引入NSURLSession类以替代NSURLConnection，NSURLSession相比NSURLConnection的优势在于处理后台请求更强大。</p>
<p>NSURLSession支持三种配置类型：<br>Default：默认配置，支持配置使用缓存、身份验证，数据以文件形式保存在磁盘中<br>Ephemeral:及时的请求类型，不使用缓存、身份验证，数据保存在RAM中<br>Background:后台类型，支持在后台完成完成请求任务</p>
<p>在NSURLSession中添加的请求任务支持三种：<br>数据任务：使用NSData进行数据的发送和获取，一般用于短数据的任务；<br>下载任务：从文件下载数据，支持后台下载；<br>上传任务：以文件的的形式上传数据，支持后台上传。</p>
<p>代码示例：</p>
<ol>
<li>通过block</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1. 创建配置类型对象</span></span><br><span class="line"><span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line"><span class="comment">//2. 创建请求对象</span></span><br><span class="line"><span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:url]];</span><br><span class="line"><span class="comment">//3. 创建Session对象</span></span><br><span class="line"><span class="built_in">NSURLSession</span> *defaultSession = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:configuration];</span><br><span class="line"><span class="comment">//4. 创建任务</span></span><br><span class="line"><span class="built_in">NSURLSessionTask</span> *task = [defaultSession dataTaskWithRequest:request completionHandler:^(<span class="built_in">NSData</span> *data, <span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, data);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">//5. 启动任务</span></span><br><span class="line">[task resume];</span><br></pre></td></tr></table></figure>
<ol>
<li>通过代理方法。需要实现NSURLSessionDataDelegate协议</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> () &lt;<span class="title">NSURLSessionDataDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)setupNetworkViaURLSessionDelegate:(<span class="built_in">NSString</span> *)url method:(<span class="built_in">NSString</span> *)method&#123;</span><br><span class="line">    <span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line">    <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:url]];</span><br><span class="line">    <span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:configuration delegate:<span class="keyword">self</span> delegateQueue:[<span class="built_in">NSOperationQueue</span> mainQueue]];</span><br><span class="line">    <span class="built_in">NSURLSessionTask</span> *task = [session dataTaskWithRequest:request];</span><br><span class="line">    [task resume];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma NSURLSessionDataDelegate</span></span><br><span class="line"><span class="comment">//开始接收数据</span></span><br><span class="line">-(<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask didReceiveData:(<span class="built_in">NSData</span> *)data&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结束接收数据</span></span><br><span class="line">-(<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task didCompleteWithError:(<span class="built_in">NSError</span> *)error&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后台下载任务：<br>这是NSURLSession的优势所在，要进行后台下载任务，需要实现NSURLSessionDownloadDelegate协议<br>如果在下载进行过程中App切入后台（点击Home键，来电等），URLSession的delegate不会再收到task相关消息，但下载任务还会继续执行，当后台下载任务完成后会调用AppDelegate中的<br><figure class="highlight"><figcaption><span>*)application handleEventsForBackgroundURLSession:(NSString *)identifier completionHandler:(void (^)())completionHandler```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;&#36890;&#30693;App&#65292;&#28982;&#21518;App&#20250;&#22312;&#21518;&#21488;&#35843;&#29992;NSURLSession&#20195;&#29702;&#26041;&#27861;&#36890;&#30693;&#19979;&#36733;&#32467;&#26524;&#65306;&#10;&#10;//&#19979;&#36733;&#23436;&#25104;&#21518;&#35843;&#29992;&#10;&#19979;&#36733;&#25104;&#21151;&#65306;```-(void)URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask didFinishDownloadingToURL:(NSURL *)location</span><br></pre></td></tr></table></figure></p>
<p>下载成功/失败：<code>-(void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didCompleteWithError:(NSError *)error</code></p>
<p>后台工作流程分析：<a href="http://www.cnblogs.com/biosli/p/iOS_Network_URL_Session.html" target="_blank" rel="external">http://www.cnblogs.com/biosli/p/iOS_Network_URL_Session.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>iOS 7引入NSURLSession类以替代NSURLConnection，NSURLSession相比NSURLConnection的优势在于处理后台请求更强大。</p>
<p>NSURLSession支持三种配置类型：<br>Default：默认配置，支持配置使用缓存]]>
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NSURLConnection & NSURLRequest]]></title>
    <link href="http://yoursite.com/2016/07/16/NSURLConnection/"/>
    <id>http://yoursite.com/2016/07/16/NSURLConnection/</id>
    <published>2016-07-16T08:20:36.000Z</published>
    <updated>2016-07-16T08:20:36.000Z</updated>
    <content type="html"><![CDATA[<p>在iOS 7 推出NSURLSession之前，苹果系统提供NSURLConnection&amp;NSURLRequest来进行网络数据访问。NURLConnection访问网络的方式包括1)同步方式;2)异步方式;所谓同步即数据请求在主线程进行，一旦发起数据请求，则会阻塞主线程直到服务器返回响应或超时，显然这是用户体验不友好的方式。相反，异步方式即使用多线程进行数据请求，和主线程并发执行，不会阻塞主线程。<br>一、基本使用流程</p>
<ul>
<li>NSURL</li>
<li>NSURLRequest创建请求</li>
<li>NSURLConnection发送请求</li>
<li>处理返回结果</li>
</ul>
<p>二、两种使用方式</p>
<ul>
<li>代理方法：通过实现NSURLConnectionDelegate和NSURLConnectionDataDelegate协议，在delegate method中可以监控全过程</li>
<li>block方式：响应以block方式处理，无法监控全过程。</li>
</ul>
<p>代码示例：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    -(<span class="type">void</span>)setupNetworkViaURLConnection:(<span class="type">NSString</span> *)url <span class="keyword">method</span>:(<span class="type">NSString</span> *)<span class="keyword">method</span>&#123;</span><br><span class="line">    <span class="type">NSMutableURLRequest</span> *request = [[<span class="type">NSMutableURLRequest</span> alloc] initWithURL:[<span class="type">NSURL</span> <span class="type">URLWithString</span>:url] cachePolicy:<span class="type">NSURLRequestUseProtocolCachePolicy</span> timeoutInterval:<span class="number">60</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">NSArray</span> *methodArray = @[@<span class="string">"GET"</span>, @<span class="string">"POST"</span>, @<span class="string">"PUT"</span>, @<span class="string">"DELETE"</span>];</span><br><span class="line">    <span class="keyword">if</span> (![methodArray containsObject:<span class="keyword">method</span>])&#123;</span><br><span class="line">        <span class="keyword">return</span>;//<span class="keyword">method</span> <span class="type">ERROR</span>.</span><br><span class="line">    &#125;</span><br><span class="line">    request.<span class="type">HTTPMethod</span> = <span class="keyword">method</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="type">NSURLConnection</span> sendAsynchronousRequest:request queue:[<span class="type">NSOperationQueue</span> mainQueue] completionHandler:^(<span class="type">NSURLResponse</span> *response, <span class="type">NSData</span> *data, <span class="type">NSError</span> *connectionError) &#123;</span><br><span class="line">        <span class="keyword">if</span> (connectionError != <span class="keyword">nil</span> || data ==<span class="keyword">nil</span>)&#123;</span><br><span class="line">            //failure</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            //success</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>三、处理后台请求（实现思路？）</p>
<ul>
<li>后台上传</li>
<li>后台下载</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>在iOS 7 推出NSURLSession之前，苹果系统提供NSURLConnection&amp;NSURLRequest来进行网络数据访问。NURLConnection访问网络的方式包括1)同步方式;2)异步方式;所谓同步即数据请求在主线程进行，一旦发起数据请求，则会阻]]>
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS7新特性--edgesForExtendedLayout]]></title>
    <link href="http://yoursite.com/2016/07/16/edgesForExtendedLayout_ios7/"/>
    <id>http://yoursite.com/2016/07/16/edgesForExtendedLayout_ios7/</id>
    <published>2016-07-16T08:18:51.000Z</published>
    <updated>2016-07-16T08:18:51.000Z</updated>
    <content type="html"><![CDATA[<p>实现下拉刷新时遇到一个问题：将UINavigationController作为UITableView的容器时，在TableViewController的viewDidAppear获取tableView.contentOffset.y的值为-64，即tableView的左上角向下偏移了64个像素点，而不是预期的0，后来查资料后发现，这是iOS7的一个新特性-UIViewController.edgesForExtendedLayout，当你的容器是UINavigationController时，默认的布局将从navigationbar开始，如果要让容器内元素布局从0开始，则在viewDidLoad内设置viewController.edgesForExtendedLaout = UIRectEdgeNone即可。（通过设置UINavigationController.navigationBar.translucent = NO也能实现同样效果)。<br>如果想实现tableView从左上角开始显示，则设置viewController.automaticallyAdjustsScrollViewInsets = NO; 这样tableView最上面会被导航栏遮挡住。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>实现下拉刷新时遇到一个问题：将UINavigationController作为UITableView的容器时，在TableViewController的viewDidAppear获取tableView.contentOffset.y的值为-64，即tableView的左上角]]>
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[坑爹的饭否API]]></title>
    <link href="http://yoursite.com/2016/07/06/fanfou_api/"/>
    <id>http://yoursite.com/2016/07/06/fanfou_api/</id>
    <published>2016-07-06T12:33:55.000Z</published>
    <updated>2016-07-06T12:33:54.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>第一步获取request_token的时候签名的secret要在consumer_secret后面加「&amp;」</li>
<li>第三步『使用授权后的RequestToken获取AccessToken时的签名秘钥必须是”consumer_secret&amp;requesToken_secret”!</li>
<li>建议结合专业Oauth认证流程文档看比如新浪微博的就写的很详细，不会埋坑，否则遇到问题基本靠猜，签名认证失败时返回的baseString也是没有用的</li>
<li>授权登陆后获取当前用户的资料，应使用account.verify credentials这个API</li>
<li>JSON -&gt; Object iOS平台的JSON数据解析(Jastor</li>
<li>UITableViewCell的presentViewController:nav animated:TRUE completion:nil];单击时存在时延，双击则不会—&gt;why &amp; how to fix it?</li>
<li>提交的参数里包含空格，斜杠等字符时，返回签名错误时如何处理？<br><a href="https://dev.twitter.com/oauth/overview/percent-encoding-parameters" target="_blank" rel="external">https://dev.twitter.com/oauth/overview/percent-encoding-parameters</a><br>7.1 签名时，在组装为K=V的querystring之前，将V进行URLEncode编码</li>
<li>自定义UITableViewCell时，Cell的高度根据内容高度的不同而不同， 使用UITableViewAutomaticDimension keyword</li>
<li>发送POST请求时，如果涉及到需要填写HTTP的body，使用AFHTTPRequestOperation的- (AFHTTPRequestOperation <em>)POST:(NSString </em>)URLString<pre><code>               parameters:<span class="params">(id)</span>parameters
constructingBodyWithBlock:<span class="params">(void <span class="params">(^)</span><span class="params">(id &lt;AFMultipartFormData&gt; formData)</span>)</span>block
                  success:<span class="params">(void <span class="params">(^)</span><span class="params">(AFHTTPRequestOperation *operation, id responseObject)</span>)</span>success
                  failure:<span class="params">(void <span class="params">(^)</span><span class="params">(AFHTTPRequestOperation *operation, NSError *error)</span>)</span>failure 方法，需要自己将parameters转换为QueryString添加到URLString尾。----？此处饭否的接口设计不合理，既要url中有QueryString，又要在消息体中添加参数，冗余设计。
</code></pre></li>
<li>在cellForRowAtIndexPath中获取UITableViewCell.frame.size.width 获取的值是320而不是375? 两种方法：1. 继承UITableViewCell重写layoutSubview.2. 使用tableview.frame.size.width</li>
<li>UITableViewCell 中的TextView的contentSize.height为固定的初始值36，而不是根据内容动态调整。那如何让textView.contentSize根据内容动态调整呢？</li>
<li>POST 请求失败返回”Invalid signature”时，检查参数里oauth_signature的是否处理不正确，比如被多次ULREncode.</li>
<li>参数中内容包含中文时，AFNetworking POST方法报错。解决办法：—–post中附加参数不参与签名<br>——TODO：发布推文的计算签名时的url修改</li>
<li>dictionary[@”h”] != 1? 的判断</li>
<li>完成网络请求NSUrlSession基本使用的博文编写</li>
<li>cell.imageView.frame.size.width = 0 ？</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>第一步获取request_token的时候签名的secret要在consumer_secret后面加「&amp;」</li>
<li>第三步『使用授权后的RequestToken获取AccessToken时的签名秘钥必须是”consumer_secret&amp]]>
    </summary>
    
      <category term="饭否 API" scheme="http://yoursite.com/tags/%E9%A5%AD%E5%90%A6-API/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Xcode常用快捷键不完全速查]]></title>
    <link href="http://yoursite.com/2016/01/24/xcode_hot_key/"/>
    <id>http://yoursite.com/2016/01/24/xcode_hot_key/</id>
    <published>2016-01-24T04:10:34.000Z</published>
    <updated>2016-01-24T04:10:34.000Z</updated>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>含义</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>跳转到指定行</td>
<td>cmd + l</td>
</tr>
<tr>
<td>跳转到变量定义的地方</td>
<td>ctrl + cmd + j</td>
</tr>
<tr>
<td>代码上移</td>
<td>opt + cmd + [</td>
</tr>
<tr>
<td>代码下移</td>
<td>opt + cmd + ]</td>
</tr>
<tr>
<td>.h/.m之间切换</td>
<td>ctrl + cmd + 上下箭头</td>
</tr>
<tr>
<td>CodePilot</td>
<td>cmd + shitf + x</td>
</tr>
<tr>
<td>同一个程序不同窗口切换</td>
<td>cmd + ~</td>
</tr>
<tr>
<td>编译运行</td>
<td>cmd + r</td>
</tr>
<tr>
<td>停止调试运行</td>
<td>cmd + .</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<table>
<thead>
<tr>
<th>含义</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>跳转到指定行</td>
<td>cmd + l</td>
</tr>
<tr>
<td>跳转到变量定义的地方</td>
<t]]>
    </summary>
    
      <category term="Xcode" scheme="http://yoursite.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UITableView的dequeueReusableCellWithIdentifier和dequeueReusableCellWithIdentifier:forIndexPath的区别]]></title>
    <link href="http://yoursite.com/2016/01/17/diff_dequeueReusableCellWithIdentifier/"/>
    <id>http://yoursite.com/2016/01/17/diff_dequeueReusableCellWithIdentifier/</id>
    <published>2016-01-17T05:54:46.000Z</published>
    <updated>2016-01-17T05:54:46.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableView_Class/index.html#//apple_ref/occ/instm/UITableView/dequeueReusableCellWithIdentifier:forIndexPath:" target="_blank" rel="external">苹果开发者文档</a>中是这样描述:forIndexPath的：</p>
<blockquote>
<p>The index path specifying the location of the cell. The data source receives this information when it is asked for the cell and should just pass it along. This method uses the index path to perform additional configuration based on the cell’s position in the table view.<br>… Call this method from your data source object when asked to provide a new cell for the table view. This method dequeues an existing cell if one is available, or creates a new one based on the class or nib file you previously registered, and adds it to the table.</p>
</blockquote>
<p>当通过代码来创建UITableView而非storyboard，如果不存在可以重用的TableViewCell，则数据源对象会基于你通过<code>registerNib:forCellReuseIdentifier:</code>或<code>registerClass:forCellReuseIdentifier:</code>注册的UITableViewCell（或自定义TableViewCell）类创建一个、添加到table中，所以在使用:forIndexPath这个函数前，需要先注册（可以在<code>viewDidLoad</code>中）TableViewCell类及CellReuseIdentifier，否则程序会crash，而dequeueReusableCellWithIdentifier则不需要。</p>
<p>可以参见Stackoverflow上的<a href="http://stackoverflow.com/questions/25826383/when-to-use-dequeuereusablecellwithidentifier-vs-dequeuereusablecellwithidentifi/25835438#25835438" target="_blank" rel="external">答案</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableView_Class/index.html#//apple_ref/occ/instm/UITable]]>
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[实现下拉刷新]]></title>
    <link href="http://yoursite.com/2016/01/16/Pull_To_Refresh_TableView/"/>
    <id>http://yoursite.com/2016/01/16/Pull_To_Refresh_TableView/</id>
    <published>2016-01-16T09:16:05.000Z</published>
    <updated>2016-01-16T09:16:05.000Z</updated>
    <content type="html"><![CDATA[<h2 id="UIScrollView">UIScrollView</h2><h3 id="1-_ContentSize">1. ContentSize</h3><h3 id="2-_ContentOffset">2. ContentOffset</h3><h3 id="3-_ContentInsets">3. ContentInsets</h3>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="UIScrollView">UIScrollView</h2><h3 id="1-_ContentSize">1. ContentSize</h3><h3 id="2-_ContentOffset">2. ContentOffset</h3><h3 id="3-_]]>
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《iOS编程》(Big Nerd Ranch)学习笔记]]></title>
    <link href="http://yoursite.com/2016/01/04/ios_programming_note/"/>
    <id>http://yoursite.com/2016/01/04/ios_programming_note/</id>
    <published>2016-01-04T12:29:43.000Z</published>
    <updated>2016-01-04T12:29:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="6">6</h1><h4 id="6-6">6.6</h4><p>为了实现视图延迟加载，在initWithNibName:bundle:中不应该访问viwe或view的任何子视图。凡是和view或view的子视图有关的初始化代码，都应该在viewDidLoad方法中实现，避免加载不需要在屏幕上显示的视图。</p>
<h1 id="7">7</h1><h4 id="7-3">7.3</h4><p>发送方在发送可选方法之前，会先向其委托发送另一个名为respondsToSelector:的消息。所有Objective-C对象都从NSObject继承了respondsToSelector:方法，该方法能在运行时检查对象是否实现了指定的方法。@selector()指令可以将选择器(selector)转换成数值，以便将其作为参数进行传递。</p>
<p>iOS SDK中很多类都具有委托，而几乎所有的委托都是弱引用属性。这是为了避免对象及其委托之间产生强引用循环。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) <span class="keyword">id</span>&lt;<span class="built_in">UITextFieldDelegate</span>&gt; delegate;             <span class="comment">// default is nil. weak reference</span></span><br></pre></td></tr></table></figure></p>
<h1 id="9">9</h1><h4 id="9-3">9.3</h4><p><code>[NSMUtableArray removeObjectIdenticalTo:]</code>和<code>[NSMutableArray removeObject:]</code>方法的差别是：removeObject:会枚举数组，向每一个对象发送isEqual:消息。isEqual:的作用是判断当前对象和传入对象所包含的数据是否相等（返回YES或NO）。不同的类可以根据自身情况覆盖isEqual:并实现相应的逻辑。removeObjectIdenticalTo:方法不会比较对象所包含的数据，只会比较指向对象的指针，因此，该方法只会移除数组所保存的那些和传入对象指针完全相同的指针。</p>
<h1 id="13">13</h1><h4 id="13-6">13.6</h4><p>通常情况下，UIGestureRecognizer对象不会将其处理过的触摸事件再交给其他对象来处理。一旦某个UIGestureRecognizer子类对象识别出了相应的手势，就会『吃掉』所有相关的触摸事件，导致其他UIGestureRecognizer对象没有机会再处理这些触摸事件。<br>当某个UIGestureRecognizer子类对象识别出特定的手势后，如果发现其他的UIGestureRecognizer子类对象也识别出了特定的手势，就会向其委托对象发送gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:消息。如果相应的方法返回YES，那么当前的UIGestureRecognizer子类对象就会和其他UIGestureRecognizer子类对象共享UITouch对象。</p>
<h1 id="16">16</h1><h4 id="16-2">16.2</h4><pre><code>为了将垂直方向上的约束写在水平排列的字符串中，视觉化格式语言规定，在垂直方向上，字符串的左边表示顶边、右边表示底边。
</code></pre><h1 id="19">19</h1><h4 id="19-3">19.3</h4><p>系统对Block对象和其他对象的内存管理方式不同，Block对象是在栈中创建的，而其他对象是在堆中创建的。这意味着，即使应用针对新创建的Block对象保留了强引用类型的指针，一旦创建该对象的方法返回，那么与方法内部的其他局部变量相同，新创建的Block对象也会被立即释放。为了在声明Block对象的方法返回后仍然保留该对象，必须向其发送copy消息。拷贝某个Block对象时，应用会在堆中创建该对象的备份。这样，即使应用释放了当前方法的栈，堆中的Block对象也不会被释放。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="6">6</h1><h4 id="6-6">6.6</h4><p>为了实现视图延迟加载，在initWithNibName:bundle:中不应该访问viwe或view的任何子视图。凡是和view或view的子视图有关的初始化代码，都应该在viewDidLoad方法]]>
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UIColor getRed引发的EXC_BAD_ACCESS crash]]></title>
    <link href="http://yoursite.com/2016/01/03/UIColor_crash/"/>
    <id>http://yoursite.com/2016/01/03/UIColor_crash/</id>
    <published>2016-01-03T09:49:15.000Z</published>
    <updated>2016-01-03T09:49:15.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的2015]]></title>
    <link href="http://yoursite.com/2015/12/31/My2015/"/>
    <id>http://yoursite.com/2015/12/31/My2015/</id>
    <published>2015-12-31T15:59:05.000Z</published>
    <updated>2015-12-31T15:59:05.000Z</updated>
    <content type="html"><![CDATA[<p>不知是我虚度了光阴，还是埋头庸碌，忽然间就到了2015的尾声，又到了做年终总结的时候，这个习惯很重要，有必要对这一年做个总结陈词。这一年的关键词是：执行力，目标，跑步和领悟。</p>
<h4 id="执行力">执行力</h4><p>包括我，应该有很大部分人都喜欢给自己套上『拖延症患者』的标签，小到洗衣服、收拾房间，大到工作、学习，本来计划今天完成，结果到下个月都还没开始。其实『拖延症』无非是用来掩盖自己糟糕的执行力的借口。当你不想做一件事时，任何一个原因都是理由，所以当你发现某一件事『拖延』了，那你一定是在抗拒它。小事就不提了，在工作之余自学移动开发技术这件『大事』上，我竟然也犯了拖延的错，回想计划被打乱的原因有三：手机、网络、目标不够明确。怎么解决呢？</p>
<ol>
<li>学习时离手机远一点。这个好办；</li>
<li>给自己严格限定学习时间，并且在这个时间段内不可以浏览其他无用信息，包括娱乐综艺、电影、微博；</li>
<li>我觉得我之所以目标不够明确，是因为孤军奋战，没有过来人指引，摸石头过河，不知下一脚深浅，一步错步步错。解决办法：关注过来人的信息，根据他们给新人提供的帮助，建立自己的计划。</li>
</ol>
<h4 id="目标">目标</h4><p>今年开始学习iOS开发，先是看Objective-c的语法，后来开网上推荐的斯坦福大学的公开课，但是一上来感觉颇有难度，很多不理解的地方，感觉想是乱枪打鸟。后来开始看《iOS编程》，把书上的代码都敲一遍，理解了之前不理解的一些组件原理，但是还是不够深刻。</p>
<h4 id="跑步">跑步</h4><p>3月份在超市门口把自行车弄丢后，反而觉得轻松了许多，那几天心情不好，毕竟花了一千多大洋买的，骑了半年不到，没任何思想准备就没了，连个招呼都不打。丢了就丢了呗，再买一辆？不。丢车后我反而觉得生活明朗了些许，早起了半个小时，骑公共自行车，或者挤公交，路上看看匆匆上班的其他人，感觉不像骑车时那么孤单了，虽然还是只身一人。换iPone后开始计划跑步，从1公里到2公里，再到四公里、五公里，到现在1小时跑10公里，累计里程达到232公里。跑步后的我感觉全身心变得轻松了许多，自己筛选了跑步歌单<a href="http://music.163.com/#/share?id=115687488&amp;uid=3762319" target="_blank" rel="external">《跑出盐》</a>，虽然现在还不多。跑步和洗澡、刷牙一样，是难得能安静思考的时间，找找自己，想想生活和朋友。待明年春暖花开，我会再撒开脚丫跑。</p>
<h4 id="书单">书单</h4><p>2015年的书单：<br>《解忧杂货铺》东野圭吾<br>《绿皮火车》周云蓬<br>《生命不息 折腾不止》罗永浩<br>《爱你就像爱生命》王小波<br>《一直特立独行的猪》王小波</p>
<h4 id="出走">出走</h4><p>青岛<br>厦门<br>上海</p>
<h4 id="领悟">领悟</h4><ol>
<li>什么都想要，最后什么都得不到，所以专注很重要，不要三天打鱼两天晒网</li>
</ol>
<h4 id="认识自我">认识自我</h4><ol>
<li>增强自信，放下自尊</li>
</ol>
<h4 id="2016">2016</h4><p>iOS学习计划<br>至少开发2款APP<br>至少上架1款APP到App Store<br>至少一个开源组件<br>熟悉设计模式用法<br>每周至少一篇博客？保持更新<br>Python项目</p>
<p>计划书单<br>《Effective Objective 2.0》<br>《Objective-C 编程之道》<br>《我说的不一定对》梁欢<br>《编程珠玑》<br>《MacTalk人生元编程》池建强<br>《MacTal跨越边界》池建强<br>《计算广告》刘鹏</p>
<p>旅行计划<br>云南<br>哈尔滨<br>香港/台湾<br>泰国</p>
<p>其他<br>考驾照计划<br>爆炒鸡丁<br>丁香Fish</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>不知是我虚度了光阴，还是埋头庸碌，忽然间就到了2015的尾声，又到了做年终总结的时候，这个习惯很重要，有必要对这一年做个总结陈词。这一年的关键词是：执行力，目标，跑步和领悟。</p>
<h4 id="执行力">执行力</h4><p>包括我，应该有很大部分人都喜欢给自己套上『]]>
    </summary>
    
      <category term="2015" scheme="http://yoursite.com/tags/2015/"/>
    
      <category term="Think" scheme="http://yoursite.com/tags/Think/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[图床选择]]></title>
    <link href="http://yoursite.com/2015/12/30/pic/"/>
    <id>http://yoursite.com/2015/12/30/pic/</id>
    <published>2015-12-30T13:37:15.000Z</published>
    <updated>2015-12-30T13:37:15.000Z</updated>
    <content type="html"><![CDATA[<p>hexo的文章里偶尔需要上传图片，于是就涉及到了图床的选择，先试试droplr.com和flickr</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>hexo的文章里偶尔需要上传图片，于是就涉及到了图床的选择，先试试droplr.com和flickr</p>
]]>
    </summary>
    
      <category term="Think" scheme="http://yoursite.com/tags/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Limbo有感]]></title>
    <link href="http://yoursite.com/2015/12/29/Think-in-Limno/"/>
    <id>http://yoursite.com/2015/12/29/Think-in-Limno/</id>
    <published>2015-12-29T15:12:52.000Z</published>
    <updated>2015-12-30T13:12:10.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://d.pr/i/1cKUX+" alt="Limbo"></p>
<p>最近在玩一个有趣的游戏：《Limbo》（中文名地狱边境），有趣在于它所赋予的哲学气息，总感觉活脱脱就是我们的生活写照。<br>开始一路顺风顺水，慢慢的开始遇到些小困难，好在可以轻松写意地解决，然后到了比较难的关卡，智商余额不足了，这样那样都行不通，然后网上去搜攻略，突然茅塞顿开，换个思路就解决了。可是我们的生活毕竟没有攻略，也鲜有再来一次的机会。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://d.pr/i/1cKUX+" alt="Limbo"></p>
<p>最近在玩一个有趣的游戏：《Limbo》（中文名地狱边境），有趣在于它所赋予的哲学气息，总感觉活脱脱就是我们的生活写照。<br>开始一路顺风顺水，慢慢的开始遇到些小困难，好]]>
    </summary>
    
      <category term="Think" scheme="http://yoursite.com/tags/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Error: Cannot GET atom.xml for hexo RSS.]]></title>
    <link href="http://yoursite.com/2015/09/04/Error-Cannot-GET-atom-xml-for-hexo-RSS/"/>
    <id>http://yoursite.com/2015/09/04/Error-Cannot-GET-atom-xml-for-hexo-RSS/</id>
    <published>2015-09-04T06:06:59.000Z</published>
    <updated>2015-09-04T06:27:00.000Z</updated>
    <content type="html"><![CDATA[<p>安装hexo-generator-feed和hexo-generator-sitemap插件后，访问站点<a href="http://0.0.0.0:4000/atom.xml" target="_blank" rel="external">http://0.0.0.0:4000/atom.xml</a>显示“Cannot GET atom.xml”：无法获取atom.xml，sitemap.xml也是如此，想必是哪里配置不正确。查看hexo/package.json，发现里面没有hexo-generator-feed和hexo-generator-sitemap的配置，那就添加一下，版本号在对应插件目录下的package.json中可以查到。</p>
<pre><code>  {
  "<span class="attribute">name</span>": <span class="value"><span class="string">"hexo-site"</span></span>,
  "<span class="attribute">version</span>": <span class="value"><span class="string">"0.0.0"</span></span>,
  "<span class="attribute">private</span>": <span class="value"><span class="literal">true</span></span>,
  "<span class="attribute">hexo</span>": <span class="value">{
    "<span class="attribute">version</span>": <span class="value"><span class="string">"3.1.1"</span>
  </span>}</span>,
  "<span class="attribute">dependencies</span>": <span class="value">{
    "<span class="attribute">hexo</span>": <span class="value"><span class="string">"^3.1.0"</span></span>,
    "<span class="attribute">hexo-deployer-git</span>": <span class="value"><span class="string">"0.0.4"</span></span>,
    "<span class="attribute">hexo-generator-archive</span>": <span class="value"><span class="string">"^0.1.2"</span></span>,
    "<span class="attribute">hexo-generator-category</span>": <span class="value"><span class="string">"^0.1.2"</span></span>,
    "<span class="attribute">hexo-generator-index</span>": <span class="value"><span class="string">"^0.1.2"</span></span>,
    "<span class="attribute">hexo-generator-tag</span>": <span class="value"><span class="string">"^0.1.1"</span></span>,
    "<span class="attribute">hexo-renderer-ejs</span>": <span class="value"><span class="string">"^0.1.0"</span></span>,
    "<span class="attribute">hexo-renderer-marked</span>": <span class="value"><span class="string">"^0.2.4"</span></span>,
    "<span class="attribute">hexo-renderer-stylus</span>": <span class="value"><span class="string">"^0.2.3"</span></span>,
    "<span class="attribute">hexo-server</span>": <span class="value"><span class="string">"^0.1.2"</span></span>,
    "<span class="attribute">hexo-generator-feed</span>": <span class="value"><span class="string">"^1.0.3"</span></span>,
    "<span class="attribute">hexo-generator-sitemap</span>": <span class="value"><span class="string">"^1.0.1"</span>
  </span>}
</span>}
</code></pre><p>配置修改完后<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></p>
<p>重新生成页面后，再访问atom.xml就有了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>安装hexo-generator-feed和hexo-generator-sitemap插件后，访问站点<a href="http://0.0.0.0:4000/atom.xml" target="_blank" rel="external">http://0.0.0.0:]]>
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git clone timeout]]></title>
    <link href="http://yoursite.com/2015/09/03/Git-clone-timeout/"/>
    <id>http://yoursite.com/2015/09/03/Git-clone-timeout/</id>
    <published>2015-09-03T09:16:03.000Z</published>
    <updated>2015-09-04T06:19:17.000Z</updated>
    <content type="html"><![CDATA[<p>When I clone from github.com on terminate it occurs an error : RPC failed; result=56, HTTP code = 200, and then config likes below:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> GIT_TRACE_PACKET=<span class="number">1</span></span><br><span class="line">$ <span class="built_in">export</span> GIT_TRACE=<span class="number">1</span></span><br><span class="line">$ <span class="built_in">export</span> GIT_CURL_VERBOSE=<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>It will fix when you do git clone again.<br>See detail from <a href="https://confluence.atlassian.com/pages/viewpage.action?pageId=693897332" target="_blank" rel="external">Here</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>When I clone from github.com on terminate it occurs an error : RPC failed; result=56, HTTP code = 200, and then config likes below:<br><f]]>
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/08/02/hello-world/"/>
    <id>http://yoursite.com/2015/08/02/hello-world/</id>
    <published>2015-08-02T10:01:03.000Z</published>
    <updated>2015-08-02T10:01:03.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
